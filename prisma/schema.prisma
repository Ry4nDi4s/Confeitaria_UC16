// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Order {
  id Int @id @default(autoincrement())

  which_product String
  who_order String
  value Float
  quantity Int
  delivery_day DateTime
  
  createdAt DateTime @map("created_at") @default (now())
  updatedAt DateTime @map("updated_at") @updatedAt

  // FK - Order
  orderId Int @map("order_id")
  carrinhoId Int @map("carrinho_id") 
  
  carrinho Order @relation("OrderToCarrinho", fields: [carrinhoId], references: [id])
  carrinhos Order[]  @relation("OrderToCarrinho")

  payment Payment? @relation("OrderparaPagamento")
}

model Payment {
  id Int  @id @default(autoincrement())
 
  card String
  pix String
  money Float
  value Float
  scheduling String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  // FK - Payment
  paymentId Float @map("Payment_id")
  orderId Int @map("Order_id")

  payment Order? @relation("OrderparaPagamento", fields:[orderId], references: [id])
}  

model Product {
  id Int @id @default(autoincrement())
  
  description String
  name String
  quantify Int 
  stock Float
  maturity DateTime

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  carrinhos Carrinho[]
  receitas Receita[]
}

model Carrinho{
  id Int @id @default(autoincrement())

  // FK - Carrinho
  carrinhoId Int @map("carrinho_id")
  carrinho Product @relation(fields: [carrinhoId], references: [id])
}

model Receita{
  id Int @id @default(autoincrement())
  receitaId Int @map("receita_id")
  receita Product @relation(fields: [receitaId], references: [id])
}

model User {
  id Int @id @default(autoincrement())

  name String
  email String
  password String
  phone String
  CPF String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  
  // FK -> User
  userId Int @map("user_id") 
  user User @relation("UserToUsers", fields: [userId], references: [id], onDelete: Cascade)

  users User[] @relation("UserToUsers")
  orders Order[]
  payments Payment[]

  @@map("users")
}