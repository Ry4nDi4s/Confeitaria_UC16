// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


//Gabriel
model Order {
  id Int @id @default(autoincrement())

  which_product String
  who_order String
  value Float
  quantify Int
  delivery_day DateTime
  
  createdAt DateTime @map("created_at") @default (now())
  updatedAt DateTime @map("updated_at") @updatedAt

  userId Int @map ("user_id")
  user  User @relation(fields: [userId], references: [id])  

  paymentId Int @map ("payment_id")
  payment  Payment @relation(fields: [paymentId], references: [id])

  carts Cart[]

  @@map("orders")
}


//iris
model Payment {
  id Int  @id @default(autoincrement())
 
  card String
  pix String
  money Float
  value Float
  scheduling String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  order Order[]

  @@map("payments")
}  


// Guilherme
model Product {
  id Int @id @default(autoincrement())
  
  description String
  name String
  quantify Int 
  stock Float
  maturity DateTime
  foto String
  preco Float

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  carts Cart[]
  receitas Receita[]

  @@map("products")
}


// Ryan
model User {
  id Int @id @default(autoincrement())

  name String
  email String
  password String
  phone String
  CPF String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  
  orders Order[]

  groups GroupUser[]

  @@map("users")
}


// Guilherme
model Cart{
  id Int @id @default(autoincrement())

  quantify Int

  // FK - produtos
  produtoId Int @map("produto_id")
  produto Product @relation(fields: [produtoId], references: [id])
 
  // FK - pedidos
  orderId Int @map("order_id")
  order Order @relation(fields: [orderId], references: [id])

  @@map("carts")
}


//iris
model Receita{
  id Int @id @default(autoincrement())

  ingredientId Int @map("receita_id")
  ingrediente Ingrediente @relation(fields: [ingredientId], references: [id])

  produtoId Int @map("receitas_id")
  produto Product @relation(fields: [produtoId], references: [id])

  description String
  name String
  quantify String
  stock String
  maturity DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("receitas")
}
//Gabriel
model Ingrediente{
  id Int @id @default(autoincrement())

  description String
  name String
  quantify Int
  stock Int
  maturity DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  receitas Receita[]

  @@map("ingredientes")
}
model Role{
  id   Int  @id @default(autoincrement())
  name String @unique

  description String

  groups RoleGroup[]

}

model Group{
  id   Int  @id @default(autoincrement())
  name String @unique

  description String
  
  roles RoleGroup[]
  users GroupUser[]
}

model GroupUser{
  id Int @id @default(autoincrement())

  user User @relation(fields:[ userId],references: [id])
  userId Int

  group  Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@unique([userId, groupId], name: "userId_groupId")
}


model RoleGroup{
  id Int @id @default(autoincrement())

  group Group @relation(fields:[groupId],references: [id])
  groupId Int

  role Role @relation (fields: [roleId], references: [id]) 
  roleId Int

  @@unique([groupId, roleId], name: "groupId_roleId")
}

