// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Order {
  id Int @default(autoincremente())

  which_product String
  who_order String
  value Float
  quantity Int
  delivery_day Date
  
  createAt DateTime @map("Created_at") @default (now())
  updateAt DataTime @map("updated_at") @updateAt
}

model payment {
  id Int  @id @default(autincremente())

  card String
  pix String
  money Float
  value Float
  scheduling String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  // FK - Payment
  paymentId Float @map("payment_id")
  pedidosId int @map("pedidos_id")

  payment Payment @relations(fields: [paymentId], reference [id])
  pedidos Payment @relations(fields: [pedidosId], reference [id])

}  

model Product {
  id Int @id @default(autincremente())
  
  
  description String
  name String
  quantify Int 
  stock Float
  maturity Date

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  // FK -> Product

  productId     Int      @map("product_id")
  carrihnoId    Int      @map("carrinho_id") 
  receitaId     Int      @map("receita_id")
  ingrediente   Int      @map("ingrediente_id")     

  product       Product     @relations(fields: [productId], reference: [id])
  carrinho      Product     @relations(fields: [carrihnoId], reference: [id])
  receita       Product     @relations(fields: [receitaId], reference [id])     
  ingrediente   receita     @relations(fields: [ingredienteid], reference [id])
}


model User {
  id Int @id @default( autoincrement() )

  name String
  email String
  password String
  phone String
  CPF String

  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
  
  // FK -> User

  userId int @map("user_id")
  pedidosId int @map("pedidos_id")
  pagamentoId int @map("pagamento_id)

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  pedidos User @relation(fields: [pedidosId], references: [id])
  pagamento User @relation(fields: [pagamentoId], references: [id])
}


