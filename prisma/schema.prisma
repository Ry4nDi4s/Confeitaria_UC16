// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Order {
  id Int @default(autoincrement())

  which_product String
  who_order String
  value Float
  quantity Int
  delivery_day Date
  
  createdAt DateTime @map("created_at") @default (now())
  updatedAt DateTime @map("updated_at") @updateAt

  // FK - Order
  orderId Int @map("Order_id")
  carrinhoId Int @map("carrinho_id") 
  
  carrinho Order @relation(fields: [carrinhoId], referencess: [id])
}

model Payment {
  id Int  @id @default(autincrement())
 
  card String
  pix String
  money Float
  value Float
  scheduling String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @updatedAt

  // FK - Payment
  paymentId Float @map("Payment_id")
  orderId int @map("Order_id")

  payment Order?
}  

model Product {
  id Int @id @default(autincrement())
  
  description String
  name String
  quantify Int 
  stock Float
  maturity Date

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  // Carregando o valor 1
  
  products Product[]
  // FK -> Product

  productId  Int @map("product_id")
  carrinhoId Int @map("carrinho_id") 
  receitaId  Int @map("receita_id")

  product       Product     @relation(fields: [productId], referencess: [id])
  carrinho      Product     @relation(fields: [carrinhoId], referencess: [id])
  receita       Product     @relation(fields: [receitaId], referencess [id])
  @@map("products")
}


model User {
  id Int @id @default(autoincrement())

  name String
  email String
  password String
  phone String
  CPF String

  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  
  
  // Carregando o valor 1
  users User[]  
  // FK -> User

  userId int @map("user_id")
  orderId int @map("order_id")
  paymentId int @map("payment_id")

  user User @relation(fields: [userId], referencess: [id], onDelete: Cascade)
  order User @relation(fields: [orderId], referencess: [id])
  payment User @relation(fields: [paymentId], referencess: [id])

  @@map("users")
}


